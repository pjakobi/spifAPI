//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.05.19 at 05:28:17 PM CEST 
//


package org.xmlspif.spif;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * Security Classification
 * 
 * <p>Java class for securityClassification complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="securityClassification">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.xmlspif.org/spif}equivalentClassification" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.xmlspif.org/spif}markingData" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.xmlspif.org/spif}markingQualifier" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.xmlspif.org/spif}requiredCategory" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="name" use="required" type="{http://www.xmlspif.org/spif}className" />
 *       &lt;attribute name="color" type="{http://www.xmlspif.org/spif}color" />
 *       &lt;attribute name="lacv" use="required" type="{http://www.xmlspif.org/spif}lacvInt" />
 *       &lt;attribute name="hierarchy" use="required" type="{http://www.xmlspif.org/spif}hierarchy" />
 *       &lt;attribute name="obsolete" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;anyAttribute/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "securityClassification", propOrder = {
    "equivalentClassification",
    "markingData",
    "markingQualifier",
    "requiredCategory"
})
public class SecurityClassification {

    protected List<EquivalentClassification> equivalentClassification;
    protected List<MarkingData> markingData;
    protected List<MarkingQualifier> markingQualifier;
    protected List<OptionalCategoryGroup> requiredCategory;
    @XmlAttribute(name = "name", required = true)
    protected String name;
    @XmlAttribute(name = "color")
    protected String color;
    @XmlAttribute(name = "lacv", required = true)
    protected BigInteger lacv;
    @XmlAttribute(name = "hierarchy", required = true)
    protected BigInteger hierarchy;
    @XmlAttribute(name = "obsolete")
    protected Boolean obsolete;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the equivalentClassification property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the equivalentClassification property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getEquivalentClassification().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link EquivalentClassification }
     * 
     * 
     */
    public List<EquivalentClassification> getEquivalentClassification() {
        if (equivalentClassification == null) {
            equivalentClassification = new ArrayList<EquivalentClassification>();
        }
        return this.equivalentClassification;
    }

    /**
     * Gets the value of the markingData property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the markingData property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMarkingData().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MarkingData }
     * 
     * 
     */
    public List<MarkingData> getMarkingData() {
        if (markingData == null) {
            markingData = new ArrayList<MarkingData>();
        }
        return this.markingData;
    }

    /**
     * Gets the value of the markingQualifier property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the markingQualifier property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMarkingQualifier().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link MarkingQualifier }
     * 
     * 
     */
    public List<MarkingQualifier> getMarkingQualifier() {
        if (markingQualifier == null) {
            markingQualifier = new ArrayList<MarkingQualifier>();
        }
        return this.markingQualifier;
    }

    /**
     * Gets the value of the requiredCategory property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the requiredCategory property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRequiredCategory().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OptionalCategoryGroup }
     * 
     * 
     */
    public List<OptionalCategoryGroup> getRequiredCategory() {
        if (requiredCategory == null) {
            requiredCategory = new ArrayList<OptionalCategoryGroup>();
        }
        return this.requiredCategory;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the color property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getColor() {
        return color;
    }

    /**
     * Sets the value of the color property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setColor(String value) {
        this.color = value;
    }

    /**
     * Gets the value of the lacv property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getLacv() {
        return lacv;
    }

    /**
     * Sets the value of the lacv property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setLacv(BigInteger value) {
        this.lacv = value;
    }

    /**
     * Gets the value of the hierarchy property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getHierarchy() {
        return hierarchy;
    }

    /**
     * Sets the value of the hierarchy property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setHierarchy(BigInteger value) {
        this.hierarchy = value;
    }

    /**
     * Gets the value of the obsolete property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isObsolete() {
        if (obsolete == null) {
            return false;
        } else {
            return obsolete;
        }
    }

    /**
     * Sets the value of the obsolete property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setObsolete(Boolean value) {
        this.obsolete = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
