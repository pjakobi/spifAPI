//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.05.01 at 12:18:02 PM CEST 
//


package org.xmlspif.spif;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.namespace.QName;


/**
 * <p>Java class for equivalentSecCategoryTag complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="equivalentSecCategoryTag">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="policyRef" use="required" type="{http://www.xmlspif.org/spif}policyName" />
 *       &lt;attribute name="tagSetId" use="required" type="{http://www.xmlspif.org/spif}oid" />
 *       &lt;attribute name="tagType" use="required" type="{http://www.xmlspif.org/spif}tagType" />
 *       &lt;attribute name="enumType" type="{http://www.xmlspif.org/spif}enumType" />
 *       &lt;attribute name="lacv" use="required" type="{http://www.xmlspif.org/spif}lacv" />
 *       &lt;attribute name="applied" use="required" type="{http://www.xmlspif.org/spif}applied" />
 *       &lt;attribute name="action" type="{http://www.xmlspif.org/spif}equivalencyAction" />
 *       &lt;anyAttribute/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "equivalentSecCategoryTag")
public class EquivalentSecCategoryTag {

    @XmlAttribute(name = "policyRef", required = true)
    protected String policyRef;
    @XmlAttribute(name = "tagSetId", required = true)
    protected String tagSetId;
    @XmlAttribute(name = "tagType", required = true)
    protected TagType tagType;
    @XmlAttribute(name = "enumType")
    protected EnumType enumType;
    @XmlAttribute(name = "lacv", required = true)
    protected String lacv;
    @XmlAttribute(name = "applied", required = true)
    protected Applied applied;
    @XmlAttribute(name = "action")
    protected EquivalencyAction action;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the policyRef property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPolicyRef() {
        return policyRef;
    }

    /**
     * Sets the value of the policyRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPolicyRef(String value) {
        this.policyRef = value;
    }

    /**
     * Gets the value of the tagSetId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTagSetId() {
        return tagSetId;
    }

    /**
     * Sets the value of the tagSetId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTagSetId(String value) {
        this.tagSetId = value;
    }

    /**
     * Gets the value of the tagType property.
     * 
     * @return
     *     possible object is
     *     {@link TagType }
     *     
     */
    public TagType getTagType() {
        return tagType;
    }

    /**
     * Sets the value of the tagType property.
     * 
     * @param value
     *     allowed object is
     *     {@link TagType }
     *     
     */
    public void setTagType(TagType value) {
        this.tagType = value;
    }

    /**
     * Gets the value of the enumType property.
     * 
     * @return
     *     possible object is
     *     {@link EnumType }
     *     
     */
    public EnumType getEnumType() {
        return enumType;
    }

    /**
     * Sets the value of the enumType property.
     * 
     * @param value
     *     allowed object is
     *     {@link EnumType }
     *     
     */
    public void setEnumType(EnumType value) {
        this.enumType = value;
    }

    /**
     * Gets the value of the lacv property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLacv() {
        return lacv;
    }

    /**
     * Sets the value of the lacv property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLacv(String value) {
        this.lacv = value;
    }

    /**
     * Gets the value of the applied property.
     * 
     * @return
     *     possible object is
     *     {@link Applied }
     *     
     */
    public Applied getApplied() {
        return applied;
    }

    /**
     * Sets the value of the applied property.
     * 
     * @param value
     *     allowed object is
     *     {@link Applied }
     *     
     */
    public void setApplied(Applied value) {
        this.applied = value;
    }

    /**
     * Gets the value of the action property.
     * 
     * @return
     *     possible object is
     *     {@link EquivalencyAction }
     *     
     */
    public EquivalencyAction getAction() {
        return action;
    }

    /**
     * Sets the value of the action property.
     * 
     * @param value
     *     allowed object is
     *     {@link EquivalencyAction }
     *     
     */
    public void setAction(EquivalencyAction value) {
        this.action = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

}
